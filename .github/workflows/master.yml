name: Deploy to Production
on:
  push:
    branches:
      - master
concurrency:
  group: master
  cancel-in-progress: true

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_BRANCH: ${{ github.ref }}
  NX_RUN_GROUP: $${{ github.run_id }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  DATABASE_URL: "postgres://postgres:postgres@localhost:5432/baneverywhere-testing?schema=public"
jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: production
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps TCP port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache node modules
        uses: actions/cache@v2
        id: npm-cache
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          path: |
            **/node_modules
            /tmp/.buildx-cache-api
            /tmp/.buildx-cache-proxy
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: 'master'
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.13
      - run: git fetch origin master
      - run: npm ci
      - run: npm run generate
      - run: npx nx-cloud start-ci-run
      - name: Run tests
        run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx run-many --target=test --all --parallel=false --coverage --coverage-reporters=lcov
      - run: node ./tools/coverageMerger.js
      - run: npm i coverage-badges-cli -g
      - run: coverage-badges --output coverage/badges.svg
      - run: npx nx run-many --target=build --all --configuration=production --parallel --max-parallel=2
      - run: npx nx-cloud stop-all-agents
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: rgolea
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push API Image
        id: docker_build_api
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/api.Dockerfile
          push: true
          tags: rgolea/baneverywhere-api:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
      - name: Build and push Migration Image
        id: docker_build_migration
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/migration.Dockerfile
          push: true
          tags: rgolea/baneverywhere:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
      - name: Build and push Online Checker Image
        id: docker_build_online_checker
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/online-checker.Dockerfile
          push: true
          tags: rgolea/baneverywhere-online-checker:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
      - name: Build and push Queue Processor Image
        id: docker_build_queue_processor
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/queue-processor.Dockerfile
          push: true
          tags: rgolea/baneverywhere-queue-processor:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
      - name: Build and push Bot Image
        id: docker_build_bot
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/bot.Dockerfile
          push: true
          tags: rgolea/baneverywhere-bot:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
      - name: Build and push Proxy Image
        id: docker_build_proxy
        uses: docker/build-push-action@v2
        with:
          file: ./config/docker/nginx.Dockerfile
          push: true
          tags: rgolea/baneverywhere-proxy:latest
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache-proxy
          cache-to: type=local,dest=/tmp/.buildx-cache-proxy-new,mode=max
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-api
          rm -rf /tmp/.buildx-cache-proxy
          mv /tmp/.buildx-cache-api-new /tmp/.buildx-cache-api
          mv /tmp/.buildx-cache-proxy-new /tmp/.buildx-cache-proxy
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd /app
            docker-compose down
            docker system prune -af
            rm -rf docker-compose.yml
            wget https://raw.githubusercontent.com/rgolea/baneverywhere/master/docker-compose.yml --no-cache --no-dns-cache
            docker-compose up -d
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage

  release:
    runs-on: ubuntu-latest
    steps:
      - name: set env
        run: echo "NOW=v.$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Bump version and push tag
        id: bump-version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG:  ${{ github.ref_name }}-${{ env.NOW }}
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - name: Draft Release notes
        id: draft-release-notes
        uses: release-drafter/release-drafter@v5
        if: github.ref == 'refs/heads/master'
        with:
          config-name: release-drafter.yml
          publish: false
          tag: ${{ steps.bump-version.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  agents:
    runs-on: ubuntu-latest
    name: Nx Agent ${{ matrix.agent }}
    timeout-minutes: 60
    strategy:
      matrix:
        agent: [ 1, 2, 3 ]
    steps:
      - name: Cache node modules
        uses: actions/cache@v2
        id: npm-cache
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          path: |
            **/node_modules
          restore-keys: |
            ${{ runner.os }}-npm-
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.13
      - run: npm ci
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent


